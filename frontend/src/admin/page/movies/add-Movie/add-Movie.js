import { useEffect, useRef, useState } from "react";
import Modal from 'react-modal';
import { toast, ToastContainer } from "react-toastify";
import 'react-toastify/dist/ReactToastify.css';
import axios from "axios";
import { ClipLoader } from "react-spinners";
import API from '../../../../configs/endpoint';
const AddMovie = () => {
    const GENRES = [
        "Seinen", "√Åc Qu·ª∑", "√Çm Nh·∫°c", "Anime", "B·∫°o L·ª±c", "B√≠ ·∫®n", "B√≠ ·∫©n - Si√™u nhi√™n", "Cars", "Cartoon", "CGDCT",
        "Chi·∫øn Tranh", "CN Animation", "C·ªï Trang", "Dementia", "D·ªã Gi·ªõi", "Drama", "Du H√†nh Th·ªùi Gian", "Ecchi", "Game",
        "G√¢y c·∫•n", "Gi·∫£ T∆∞·ªüng", "Gia ƒê√¨nh", "H√†i H∆∞·ªõc", "Haiten", "H√†nh ƒê·ªông", "Harem", "H√¨nh S·ª±", "Ho√°n ƒê·ªïi Gi·ªõi T√≠nh",
        "Ho·∫°t H√¨nh", "H·ªçc ƒê∆∞·ªùng", "H·ªìi h·ªôp", "Huy·ªÅn ·∫¢o", "Huy·ªÅn Huy·ªÖn", "Isekai", "Josei", "Khoa H·ªçc", "Kids", "Ki·∫øm Hi·ªáp",
        "Kinh D·ªã", "L√£ng m·∫°n", "L·ªãch S·ª≠", "Live Action", "Ma C√† R·ªìng", "Mecha", "Movie & OVA", "Mystery", "Ninja", "ONA",
        "Parody", "Ph√©p Thu·∫≠t", "Phi√™u L∆∞u", "Police", "Qu√¢n ƒê·ªôi", "Samurai", "Shoujo", "Shoujo Ai", "Shounen", "Shounen Ai",
        "Si√™u NƒÉng L·ª±c", "Si√™u Nhi√™n", "Special", "T√†i li·ªáu", "T√¢m L√Ω", "Th·∫ßn Tho·∫°i", "Th·∫ø Gi·ªõi Song Song", "Th·ªÉ Thao",
        "Thriller", "Ti√™n Hi·ªáp", "Ti·ªÉu Thuy·∫øt", "T√¨nh C·∫£m", "T√¨nh Tay Ba", "T√¨nh Y√™u", "Tokusatsu", "Tragedy", "Trailer",
        "Trinh Th√°m", "Truy·ªÅn H√¨nh", "TV Show", "Vi·ªÖn T√¢y", "Vi·ªÖn T∆∞·ªüng", "V√µ Thu·∫≠t", "V≈© Tr·ª•", "Yaoi", "Yuri", "ƒê·ªùi Th∆∞·ªùng"
    ];

    const [formData, setFormData] = useState({
        MovieNameVietnamese: '',
        MovieNameEnglish: '',
        MovieStatus: '',
        ReleaseYear: '',
        AgeRestriction: '',
        NumberOfEpisodes: '',
        Country: '',
        SummaryTitle: '',
        SummaryContent: '',
        Actor: '',
        Director: '',
        MovieGenre: '',
        CategoryID: '',
        file: null,
    });

    const [imagePreview, setImagePreview] = useState(null);
    const [movies, setMovies] = useState([]);
    const [showGenreModal, setShowGenreModal] = useState(false);
    const [selectedGenres, setSelectedGenres] = useState([]);
    const [loading, setLoading] = useState(false);
    const fileInputRef = useRef(null);
    const [categorys, setCategory] = useState([]);

    useEffect(() => {
        getCategory();
    }, []);

    const getCategory = async () => {
        const res = await axios.get(`${API}/get-category`);
        if (res.data.EC === 0) {
            setCategory(res.data.Data);
        }
    };

    const handleToggleGenre = (genre) => {
        setSelectedGenres(prev => {
            const updatedGenres = prev.includes(genre)
                ? prev.filter(g => g !== genre)
                : [...prev, genre];

            console.log("üü® ƒê√£ ch·ªçn th·ªÉ lo·∫°i:", updatedGenres);
            return updatedGenres;
        });
    };

    const handleConfirmGenres = () => {
        const genreString = selectedGenres.join(', ');
        setFormData(prev => ({ ...prev, MovieGenre: genreString }));
        setShowGenreModal(false);
        console.log("‚úÖ Danh s√°ch th·ªÉ lo·∫°i ƒë√£ x√°c nh·∫≠n:", genreString);
    };

    const handleChange = (e) => {
        const { name, value, files } = e.target;
        if (name === "file") {
            const file = files[0];
            if (file) {
                setFormData(prev => ({ ...prev, file }));
                setImagePreview(URL.createObjectURL(file));
            } else {
                setFormData(prev => ({ ...prev, file: null }));
                setImagePreview(null);
            }
        } else {
            setFormData(prev => ({ ...prev, [name]: value }));
        }
    };

    const clearImage = () => {
        setFormData(prev => ({ ...prev, file: null }));
        setImagePreview(null);
        if (fileInputRef.current) {
            fileInputRef.current.value = null;
        }
    };

    const validateForm = () => {
        const {
            MovieNameVietnamese, MovieStatus, ReleaseYear,
            NumberOfEpisodes, CategoryID, MovieGenre, file
        } = formData;

        if (!MovieNameVietnamese.trim()) {
            toast.error("Vui l√≤ng nh·∫≠p t√™n phim (Ti·∫øng Vi·ªát)");
            return false;
        }

        if (!MovieStatus) {
            toast.error("Vui l√≤ng ch·ªçn tr·∫°ng th√°i phim");
            return false;
        }

        if (!ReleaseYear || Number(ReleaseYear) < 1990) {
            toast.error("NƒÉm ph√°t h√†nh ph·∫£i t·ª´ 1990 tr·ªü ƒëi");
            return false;
        }

        if (!NumberOfEpisodes.trim()) {
            toast.error("Vui l√≤ng nh·∫≠p s·ªë t·∫≠p");
            return false;
        }

        if (!CategoryID) {
            toast.error("Vui l√≤ng ch·ªçn danh m·ª•c phim");
            return false;
        }

        if (!MovieGenre.trim()) {
            toast.error("Vui l√≤ng ch·ªçn th·ªÉ lo·∫°i phim");
            return false;
        }

        if (!file) {
            toast.error("Vui l√≤ng ch·ªçn h√¨nh ·∫£nh phim");
            return false;
        }

        return true;
    };

    const resetForm = () => {
        setFormData({
            MovieNameVietnamese: '',
            MovieNameEnglish: '',
            MovieStatus: '',
            ReleaseYear: '',
            AgeRestriction: '',
            NumberOfEpisodes: '',
            Country: '',
            SummaryTitle: '',
            SummaryContent: '',
            Actor: '',
            Director: '',
            MovieGenre: '',
            CategoryID: '',
            file: null,
        });
        setImagePreview(null);
        fileInputRef.current.value = null;
        setSelectedGenres([]);
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!validateForm()) return;

        const payload = new FormData();
        for (let key in formData) {
            if (formData[key] !== null) {
                payload.append(key, formData[key]);
            }
        }

        try {
            setLoading(true);
            const token = localStorage.getItem("token");
            const res = await axios.post(`${API}/add-new-movies`, payload, {
                headers: {
                    Authorization: `Bearer ${token}`,
                    'Content-Type': 'multipart/form-data'
                }
            });

            if (res.data.EC === 0) {
                toast.success("üéâ Th√™m phim th√†nh c√¥ng!");
                setMovies(prev => [...prev, formData]);
                resetForm();
            } else {
                toast.warn(res.data.Message || "L·ªói kh√¥ng x√°c ƒë·ªãnh");
            }
        } catch (error) {
            console.error("L·ªói g·ª≠i API th√™m phim:", error);
            toast.error("L·ªói khi th√™m phim");
        } finally {
            setLoading(false);
        }
    };
    return (
        <div className="p-5 mx-28 mt-10 bg-white rounded-lg-lg shadow-md relative">
            {loading && (
                <div className="absolute inset-0 bg-white bg-opacity-70 flex justify-center items-center z-50">
                    <ClipLoader size={50} color="#f97316" loading={true} />
                </div>
            )}

            <h2 className="text-2xl font-bold mb-4 mx-5">üé¨ Th√™m phim m·ªõi</h2>

            {/* --- FORM --- */}
            <div className="mx-5">
                <form onSubmit={handleSubmit} className="grid grid-cols-1 md:grid-cols-2 gap-8">
                    <div className="col-span-1 space-y-1">
                        <label className="block font-medium">T√™n phim (Ti·∫øng Vi·ªát)</label>
                        <input type="text" name="MovieNameVietnamese" value={formData.MovieNameVietnamese} onChange={handleChange} className="border p-2 rounded-lg w-full outline-none" required />
                    </div>

                    <div className="col-span-1 space-y-1">
                        <label className="block font-medium">T√™n phim (Ti·∫øng Anh)</label>
                        <input type="text" name="MovieNameEnglish" value={formData.MovieNameEnglish} onChange={handleChange} className="border p-2 rounded-lg w-full outline-none" />
                    </div>

                    <div className="col-span-1 space-y-1">
                        <label className="block font-medium">S·ªë t·∫≠p</label>
                        <input type="text" name="NumberOfEpisodes" value={formData.NumberOfEpisodes} onChange={handleChange} className="border p-2 rounded-lg w-full outline-none" required />
                    </div>

                    <div className="col-span-1 space-y-1">
                        <label className="block font-medium">Tr·∫°ng th√°i phim</label>
                        <select name="MovieStatus" value={formData.MovieStatus} onChange={handleChange} className="border p-2 rounded-lg w-full outline-none">
                            <option value="">Ch·ªçn tr·∫°ng th√°i phim</option>
                            <option value="New">M·ªõi</option>
                            <option value="Ongoing">ƒêang ph√°t</option>
                            <option value="Completed">Ho√†n th√†nh</option>
                        </select>
                    </div>

                    <div className="col-span-1 space-y-1">
                        <label className="block font-medium">Gi·ªõi h·∫°n ƒë·ªô tu·ªïi</label>
                        <select type="text" name="AgeRestriction" value={formData.AgeRestriction} onChange={handleChange} className="border p-2 rounded-lg w-full outline-none">
                            <option value=''>Kh√¥ng gi·ªõi h·∫°n</option>
                            <option value='T12'>12+</option>
                            <option value='T14'>14+</option>
                            <option value='T16'>16+</option>
                            <option value='T18'>18+</option>
                        </select>
                    </div>

                    <div className="col-span-1 space-y-1">
                        <label className="block font-medium">Qu·ªëc gia</label>
                        <input type="text" name="Country" value={formData.Country} onChange={handleChange} className="border p-2 rounded-lg w-full outline-none" />
                    </div>

                    <div className="col-span-1 space-y-1">
                        <label className="block font-medium">ƒê·∫°o di·ªÖn</label>
                        <input type="text" name="Director" value={formData.Director} onChange={handleChange} className="border p-2 rounded-lg w-full outline-none" />
                    </div>

                    <div className="col-span-1 space-y-1">
                        <label className="block font-medium">Di·ªÖn vi√™n</label>
                        <input type="text" name="Actor" value={formData.Actor} onChange={handleChange} className="border p-2 rounded-lg w-full outline-none" />
                    </div>

                    <div className="col-span-1 space-y-1">
                        <label className="block font-medium">Danh m·ª•c</label>
                        <select type="text" name="CategoryID" value={formData.CategoryID} onChange={handleChange} className="border p-2 rounded-lg w-full outline-none">
                            <option value=''>Ch·ªçn danh m·ª•c phim</option>
                            {categorys.map((category, index) => (
                                <option key={index} value={category.CategoryID}>{category.CategoryName}</option>
                            ))}
                        </select>
                    </div>

                    <div className="col-span-1 space-y-1 pt-0">
                        <label className="block font-medium">NƒÉm ph√°t h√†nh</label>
                        <select name="ReleaseYear" value={formData.ReleaseYear} onChange={handleChange} className="border p-2 rounded-lg w-full outline-none" required>
                            <option value="">Ch·ªçn nƒÉm ph√°t h√†nh</option>
                            {Array.from({ length: 2025 - 1998 + 1 }, (_, i) => 1998 + i).map((year) => (
                                <option key={year} value={year}>{year}</option>
                            ))}
                        </select>
                    </div>

                    <div className="col-span-1 space-y-1">
                        <label className="block font-medium">Th·ªÉ lo·∫°i</label>
                        <div className="flex gap-2 items-center">
                            <input
                                type="text"
                                name="MovieGenre"
                                value={formData.MovieGenre}
                                readOnly
                                className="border p-2 rounded-lg w-full bg-gray-100 cursor-not-allowed outline-none"
                            />
                            <button
                                type="button"
                                onClick={() => {
                                    console.log("üìù M·ªü modal ch·ªçn th·ªÉ lo·∫°i...");
                                    setShowGenreModal(true);
                                }}
                                className="bg-blue-500 text-white px-3 py-1 h-10 rounded-lg hover:bg-blue-600"
                            >
                                Ch·ªçn
                            </button>
                        </div>
                    </div>

                    <div className="col-span-1 space-y-1">
                        <label className="block font-medium">H√¨nh ·∫£nh phim</label>
                        {!imagePreview ? (
                            <input
                                type="file"
                                name="file"
                                onChange={handleChange}
                                ref={fileInputRef}
                                className="block w-full h-10 text-sm text-gray-500
                                file:mr-4 file:py-2 file:px-4
                                file:rounded-lg file:border-0
                                file:text-sm file:font-semibold
                                file:bg-blue-50 file:text-blue-700
                                file:h-10
                                hover:file:bg-blue-100
                                border rounded-lg"
                                accept="image/*"
                            />
                        ) : (
                            <div>
                                <img
                                    src={imagePreview}
                                    alt="Preview"
                                    className="mt-2 rounded-lg w-full h-56 object-cover"
                                />
                                <button
                                    type="button"
                                    onClick={clearImage}
                                    className="mt-2 px-3 py-1 bg-red-100 text-red-600 text-sm rounded hover:bg-red-200"
                                >
                                    ‚ùå X√≥a ·∫£nh
                                </button>
                            </div>
                        )}
                    </div>

                    <div className="col-span-1 space-y-1 md:col-span-2">
                        <label className="block font-medium">Ti√™u ƒë·ªÅ t√≥m t·∫Øt</label>
                        <input type="text" name="SummaryTitle" value={formData.SummaryTitle} onChange={handleChange} className="border p-2 rounded-lg w-full outline-none" />
                    </div>

                    <div className="col-span-1 space-y-1 md:col-span-2">
                        <label className="block font-medium">N·ªôi dung t√≥m t·∫Øt</label>
                        <textarea name="SummaryContent" value={formData.SummaryContent} onChange={handleChange} className="border p-2 rounded-lg w-full outline-none" rows={4} />
                    </div>




                </form>
            </div >


            <div className="mt-6 flex justify-end">
                <button type="submit" onClick={handleSubmit} className="px-4 py-2 me-5 bg-orange-500 text-white rounded-lg hover:bg-orange-600">
                    üöÄ Th√™m phim
                </button>
            </div>

            {/* Modal ch·ªçn th·ªÉ lo·∫°i */}
            <Modal
                isOpen={showGenreModal}
                onRequestClose={() => setShowGenreModal(false)}
                className="bg-white p-6 rounded-lg shadow-xl max-w-2xl mx-auto mt-20"
                overlayClassName="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
                ariaHideApp={false}
            >
                <h2 className="text-xl font-bold mb-4">Ch·ªçn th·ªÉ lo·∫°i</h2>
                <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3 max-h-[400px] overflow-y-auto">
                    {GENRES.map((genre) => (
                        <label key={genre} className="flex items-center gap-2">
                            <input
                                type="checkbox"
                                checked={selectedGenres.includes(genre)}
                                onChange={() => handleToggleGenre(genre)}
                            />
                            <span>{genre}</span>
                        </label>
                    ))}
                </div>
                <div className="mt-4 flex justify-end gap-4">
                    <button onClick={() => setShowGenreModal(false)} className="px-4 py-2 bg-gray-300 rounded-lg hover:bg-gray-400">‚ùå H·ªßy</button>
                    <button onClick={handleConfirmGenres} className="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600">‚úÖ X√°c nh·∫≠n</button>
                </div>
            </Modal>

            <ToastContainer position="top-right" autoClose={3000} />
        </div>
    )
}

export default AddMovie;